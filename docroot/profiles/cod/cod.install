<?php

/**
 * Implements hook_requirements().
 */
function cod_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();
  if($phase == 'install') {

    // Test PHP minimum execution time
    $requirements['php_max_execution_time'] = array(
      'title' => $t('PHP Max Execution Time'),
      'value' => ini_get('max_execution_time'),
    );
    $max_execution_time = (int)ini_get('max_execution_time');
    // Don't set the error when max_execution_time is 0 (Infinite).
    if ($max_execution_time && $max_execution_time < DRUPAL_MINIMUM_MAX_EXECUTION_TIME) {
      $requirements['php_max_execution_time']['description'] = $t('Your PHP execution time is too low, please set it greater than or equal to %time seconds.', array('%time' => DRUPAL_MINIMUM_MAX_EXECUTION_TIME));
      $requirements['php_max_execution_time']['severity'] = REQUIREMENT_ERROR;
    }

    if(ini_get('apc.shm_size') != NULL) {
      // Check for apc.shm_size = 96mb
      $requirements['apc_shm_size'] = array(
        'title' => $t('APC shim size'),
        'value' => ini_get('apc.shm_size'),
      );

      $shm_size = preg_split('/[a-zA-Z]/', ini_get('apc.shm_size'));
      $shm_size = $shm_size[0];

      // only check if APC var is being set somewhere (usually apc.ini).
      // throw error if there is less than 96MB available
      if ($shm_size && $shm_size < COD_MINIMUM_APC_CACHE) {
        $requirements['apc_shm_size']['description'] = $t('APC is installed but %shm_size is not enough APC cache to successfully install COD.
           Find your <em>apc.ini</em> file and change the <em>apc.shm_size</em> value to at least <em>%min_shm_size</em>.', array('%shm_size' => $shm_size . 'M', '%min_shm_size' => COD_MINIMUM_APC_CACHE . 'M'));
        $requirements['apc_shm_size']['severity'] = REQUIREMENT_ERROR;
      }
    }
  }
  return $requirements;
}

/**
 * Implements hook_install_tasks().
 */
function cod_install_tasks() {
  //make sure we have more memory than 196M. if not lets try to increase it.
  if (ini_get('memory_limit') != '-1' && ini_get('memory_limit') <= '196M' && ini_get('memory_limit') >= '128M') {
    ini_set('memory_limit', '196M');
  }

  $selected_extras = variable_get('cod_selected_extras', array());
  // To Do - demo content
  //$demo_content = variable_get('cod_install_example_content', FALSE);

  // To Do - Acquia Connector
  //$acquia_connector = variable_get('cod_install_acquia_connector', FALSE);

  return array(
    //'cod_acquia_connector_enable' => array(
    //  'display' => FALSE,
    //  'type' => '',
    //  'run' => $acquia_connector ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,
    //),
    //'cod_demo_content' => array(
    //  'display' => FALSE,
    //  'type' => '',
    //  'run'
    'cod_create_first_event' => array(
      'display_name' => st('Create the first event'),
      'display' => TRUE,
      'type' => 'form',
    ),
    'cod_install_additional_modules' => array(
      'display_name' => !empty($selected_extras['example_content']) ? st('Install example content') : st('Install additional functionality'),
      'display' => FALSE,
      'type' => 'batch',
    ),
    'cod_admin_permissions' => array(
      'display' => FALSE,
    ),
  );
}

/**
 * Implements hook_install_tasks_alter().
 */
function cod_install_tasks_alter(&$tasks, $install_state) {
  global $install_state;
  $tasks['install_profile_modules']['display_name'] = st('Install Conference Organizing Distribution');

  // Skip profile selection step.
  $tasks['install_select_profile']['display'] = FALSE;

  // Skip language selection install step and default language to English.
  $tasks['install_select_locale']['display'] = FALSE;
  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;
  $install_state['parameters']['locale'] = 'en';

  // Override "install_finished" task to redirect people to home page.
  $tasks['install_finished']['function'] = 'cod_install_finished';
}


/**
 * Override of install_finished() without the useless text.
 */
function cod_install_finished(&$install_state) {

  // Remember the profile which was used.
  variable_set('install_profile', drupal_get_profile());
  variable_set('install_task', 'done');

  // BEGIN copy/paste from install_finished().
  // Remove the bookmarks flag
  $flag = flag_get_flag('bookmarks');
  if($flag) {
    $flag->delete();
    $flag->disable();
    _flag_clear_cache();
  }

  variable_set('clean_url', 1);

  // Enable default settings for jquery_update
  variable_set('jquery_update_compression_type', 'min');
  variable_set('jquery_update_jquery_admin_version', '1.7');
  variable_set('jquery_update_jquery_version', '1.8');

  // Flush all caches to ensure that any full bootstraps during the installer
  // do not leave stale cached data, and that any content types or other items
  // registered by the installation profile are registered correctly.
  drupal_flush_all_caches();

  // Enable the Origins theme and set it as the default.
  $cod_themes = array('omega', 'pisces', 'adminimal', 'fisherman');
  theme_enable($cod_themes);

    // The Bartik theme is automatically enabled during installation. Disable it.
  db_update('system')
    ->fields(array('status' => 0))
    ->condition('type', 'theme')
    ->condition('name', 'bartik')
    ->execute();

  // Set the default and administration themes.
  variable_set('theme_default', 'pisces');
  // Set a default administrative theme:
  variable_set('admin_theme', 'fisherman');
  variable_set('node_admin_theme', FALSE);

  // We make custom code for the footer here because we want people to be able to freely edit it if they wish.
  $footer_body = '<p>'. st('A community event site, powered by the <a href="@drupal">Conference Organizing Distribution</a>', array('@drupal' => url('https://drupal.org/project/cod'))) . '</p>';

  $footer_block_text = array(
    'body' => st($footer_body),
    'info' => st('Default Footer'),
    'format' => 'full_html',
  );

  if (drupal_write_record('block_custom', $footer_block_text)) {
    $footer_block = array(
      'module' => 'block',
      'delta' => $footer_block_text['bid'],
      'theme' => 'pisces',
      'visibility' => 0,
      'region' => 'footer',
      'status' => 1,
      'pages' => 0,
      'weight' => 1,
      'title' => variable_get('site_name', 'Conference Organizing Distribution'),
    );
    drupal_write_record('block', $footer_block);
  }

  // Installation profiles are always loaded last
  db_update('system')
    ->fields(array('weight' => 1000))
    ->condition('type', 'module')
    ->condition('name', drupal_get_profile())
    ->execute();

  // Cache a fully-built schema.
  drupal_get_schema(NULL, TRUE);

  variable_set('title_node', array(
    'auto_attach' => array('title' => 'title'),
    'hide_label' => array('page' => 0, 'entity' => 0),
  ));

  //TODO: Hardcoded to the first event that is created.
  if (module_exists('cod_session')) {
    $first_event = node_load(1);
    cod_session_generate_session_tracks($first_event, 'node', TRUE);
  }

  // Update Incorrect foreign key references.
  // See https://www.drupal.org/node/1969018 for more info.
  cod_update_7007();
  // Run cron to populate update status tables (if available) so that users
  // will be warned if they've installed an out of date Drupal version.
  // Will also trigger indexing of profile-supplied content or feeds.
  drupal_cron_run();
  // END copy/paste from install_finished().

  if (isset($messages['error'])) {
    $output = '<p>' . (isset($messages['error']) ? st('Review the messages above before visiting <a href="@url">your new site</a>.', array('@url' => url(''))) : st('<a href="@url">Visit your new site</a>.', array('@url' => url('')))) . '</p>';
    return $output;
  }
  else {
    // Since any module can add a drupal_set_message, this can bug the user
    // when we redirect him to the front page. For a better user experience,
    // remove all the message that are only "notifications" message.
    drupal_get_messages('status', TRUE);
    drupal_get_messages('completed', TRUE);

    // If we don't install drupal using Drush, redirect the user to the front
    // page.
    if (!drupal_is_cli()) {
      drupal_goto('');
    }
  }
}

function cod_admin_permissions() {
  //get the administrator role, we set this in the install file
  $admin_role = user_role_load_by_name('administrator');
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
}

/**
 * Task callback: uses Batch API to enable modules based on user selection.
 *
 * Creates all demo content if requested and installs optional modules that
 * providing additional functionality to the base install.
 */
function cod_install_additional_modules() {
  $modules = variable_get('cod_selected_extras', array());

  // Resolve the dependencies now, so that module_enable() doesn't need
  // to do it later for each individual module (which kills performance).
  $files = system_rebuild_module_data();
  $modules_sorted = array();
  foreach ($modules as $module_key => $module) {
    if ($files[$module]->requires) {
      // Create a list of dependencies that haven't been installed yet.
      $dependencies = array_keys($files[$module]->requires);
      $dependencies = array_filter($dependencies, '_cod_filter_dependencies');
      // Add them to the module list.
      $modules = array_merge($modules, $dependencies);
    }
  }
  $modules = array_unique($modules);
  foreach ($modules as $module) {
    $modules_sorted[$module] = $files[$module]->sort;
  }
  arsort($modules_sorted);

  $operations = array();

  // Enable the selected modules.
  foreach ($modules_sorted as $module => $weight) {
    $operations[] = array('_cod_enable_module', array($module, $files[$module]->info['name']));
  }

  $batch = array(
    'title' => !empty($selected_extras['example_content']) ? st('Installing example content') : st('Installing additional functionality'),
    'operations' => $operations,
    'file' => drupal_get_path('profile', 'cod') . '/cod.install_callbacks.inc',
  );

  return $batch;
}

/**
 * array_filter() callback used to filter out already installed dependencies.
 */
function _cod_filter_dependencies($dependency) {
  return !module_exists($dependency);
}

/**
 * Let the admin user create the first group as part of the installation process
 */
function cod_create_first_event() {
  $form['cod_first_event_explanation'] = array(
    '#markup' => '<h2>' . st('Create your first event.') . '</h2>' . st("COD allows you to create multiple events and organizes content related to a particular event, such as sessions, attendees, and announcements."),
    '#weight' => -1,
  );

  $form['cod_first_event_title'] = array(
    '#type' => 'textfield',
    '#title' => st("Event name"),
    '#description' => st('This is the name of your conference or event. You may want to include the year or date if this is a repeating event.'),
    '#required' => TRUE,
    '#default_value' => st('DrupalCamp Antarctica'),
  );

  $form['cod_first_event_body'] = array(
    '#type' => 'textarea',
    '#title' => st('Event description'),
    '#description' => st("This text will appear on the event's homepage and gives a general overview of your event. You can always change this text later."),
    '#required' => TRUE,
    '#default_value' => st('DrupalCamp Antarctica is held once a year at the South Pole, with a regular attendance of around 200 penguins'),
  );

  $form['cod_first_event_modules'] = array(
    '#type' => 'checkboxes',
    '#title' => st('Optional Event Features'),
    '#description' => st("Select the optional features above that are relevant to your event."),
    '#required' => FALSE,
    '#options' => _cod_get_optional_modules(),
  );

  $form['cod_first_event_submit'] = array(
    '#type'  => 'submit',
    '#value' => st('Save and continue')
  );

  return $form;
}

/**
 * Save the first group form
 *
 * @see cod_create_first_group().
 */
function cod_create_first_event_submit($form_id, &$form_state) {
  $values = $form_state['values'];

  $enabled_features = array();
  if (isset($values['cod_first_event_modules'])) {
    foreach ($values['cod_first_event_modules'] as $module_name => $module_enabled) {
      if ($module_enabled) {
        $enabled_features[$module_name] = $module_name;
      }
    }
    variable_set('cod_selected_extras', $enabled_features);
  }

  $first_group = new stdClass();
  $first_group->type = 'event';
  node_object_prepare($first_group);

  $first_group->title = $values['cod_first_event_title'];
  $first_group->body[LANGUAGE_NONE][0]['value'] = $values['cod_first_event_body'];
  $first_group->uid = 1;
  $first_group->language = LANGUAGE_NONE;
  $first_group->status = 1;
  node_save($first_group);

  // Set the homepage to the first event.
  variable_set('site_frontpage', 'node/1');
  variable_set('cod_events_default_event', '1');
}

/**
 * Implements hook_install().
 */
function cod_install() {
  // Do not use the administration theme when editing or creating content.
  variable_set('node_admin_theme', '0');

  // Create page type.

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.

  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Default page to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for page nodes by default.
  $theme_settings = variable_get('theme_settings', array());
  $theme_settings['toggle_node_info_page'] = FALSE;
  variable_set('theme_settings', $theme_settings);

  // Revert features to be sure everything is setup correctly.
  // Currently disabled because we don't want devs enabling them on startup
  $revert = array(
    'cod_wysiwyg' => array('ckeditor_profile'),
  );
  features_revert($revert);

  node_access_rebuild(FALSE);

  // The installer requires that the system theme settings form
  // be submitted in order for its themes' settings to be properly set
  // For more background, see http://drupal.org/node/1776730.
  module_load_include('inc', 'system', 'system.admin');
  foreach ($cod_themes as $theme_name) {
    $form_state = form_state_defaults();
    $form_state['build_info']['args'][0] = $theme_name;
    $form_state['values'] = array();
    drupal_form_submit('system_theme_settings', $form_state);
  }
}

/**
 * Enable the Libraries module.
 */
function cod_update_7001() {
  $module_list = array('libraries');
  module_enable($module_list);
  return array();
}

/**
 * Enable new dependencies for COD to work properly.
 */
function cod_update_7002() {
  $module_list = array('inline_entity_form', 'views_autorefresh', 'views_datasource');
  module_enable($module_list);
  return array();
}

/**
 * Switch from Seven to Adminimal admin theme.
 */
function cod_update_7003() {
  $module_list = array('adminimal', 'adminimal_admin_menu');
  module_enable($module_list);
  variable_set('admin_theme', 'adminimal');

  // Enable default settings for jquery_update
  variable_set('jquery_update_compression_type', 'min');
  variable_set('jquery_update_jquery_admin_version', '1.7');
  variable_set('jquery_update_jquery_version', '1.8');
  return array();
}

/**
 * Make sure Adminimal and Pisces are enabled if they are set as themes.
 */
function cod_update_7004() {
  //Verify adminimal is enabled if its set as admin theme.
  if (variable_get('admin_theme', '') == 'adminimal') {
    $admin_theme = 'adminimal';
    theme_enable(array($admin_theme));
    module_enable(array('adminimal_admin_menu'));
    theme_disable(array('seven'));
  }
  // Verify pisces is enabled if its the default theme.
  if (variable_get('theme_default', '') == 'pisces') {
    theme_enable(array('pisces'));
    theme_disable(array('bartik'));
  }
  return array();
}

/**
 * Set Fisherman as replacement Administration theme for Adminimal.
 */
function cod_update_7006() {
  //Verify that Adminimal is set as admin theme, then switch to Fisherman.
  if (variable_get('admin_theme', '') == 'adminimal') {
    $admin_theme = 'fisherman';
    theme_enable(array($admin_theme));
    variable_set('admin_theme', $admin_theme);
  }
  return array();
}

/**
 * Update foreign keys where necessary.
 * See https://www.drupal.org/node/1969018 for more info.
 */
function cod_update_7007() {
  // Load the base table configuration from the cache.
  $base_tables = variable_get('entityreference:base-tables', array());

  foreach (field_info_fields() as $field_name => $field) {

    if ($field['type'] != 'entityreference') {
      // Not an entity reference field.
      continue;
    }

    // Read in the field config.
    $field_name = field_read_field($field['field_name']);

    // Create a foreign key to the target entity type base type, if available.
    $entity_type = $field_name['settings']['target_type'];
    if (isset($base_tables[$entity_type])) {
      list($base_table, $id_column) = $base_tables[$entity_type];
      $schema['foreign keys'][$base_table] = array(
        'table' => $base_table,
        'columns' => array('target_id' => $id_column),
      );
    }

    // Update foreign keys to actually contain the proper entity foreign keys
    // if they differ.
    if ($field_name['foreign keys'] != $schema['foreign keys']) {
      $field_name['foreign keys'] = $schema['foreign keys'];
      field_update_field($field_name);
    }
  }
}

/**
 * Context module has been removed from COD. WARNING: Run Registry Rebuild first if using drush updb!
 */
function cod_update_7008() {
  // Remove stale registry files.
  db_delete('registry_file')
    ->condition('filename', 'profiles/cod/modules/contrib/context', 'LIKE')
    ->execute();
  db_delete('registry')
    ->condition('filename', 'profiles/cod/modules/contrib/context', 'LIKE')
    ->execute();
  
  registry_rebuild();
  // Check to see if context exists somewhere else. If so, we don't have to do
  // anything else.
  if (strpos(drupal_get_path('module', 'context'), 'sites') !== FALSE) {
    return array();
  }
  if (db_table_exists('context')) {
    $num_rows = db_select('context')
      ->countQuery();
    if ($num_rows === 0) {
      variable_del('context_ui_show_empty_regions');
      variable_del('context_reaction_block_disable_core');
      variable_del('context_reaction_block_all_regions');
      db_drop_table('context');
      // Remove context from system table.
      db_delete('system')
        ->condition('name', 'context')
        ->execute();
      db_delete('system')
        ->condition('name', 'context_ui')
        ->execute();
    }
    else {
      // Inform the administrator that Context is no longer contained in COD.
      drupal_set_message(t('Due to a security update in Context and its lack of use in COD, Context has been removed and disabled. If you would like to continue using Context, please download the module to /sites/all/contrib/modules.'), 'warning');
      db_update('system')
        ->fields(array(
            'status' => 0,
          ))
          ->condition('name', array('context', 'context_ui'), 'IN')
          ->execute();
      return array();
    }
  }
}
