<?php
/**
 * @file
 * Install, update and uninstall functions for the panelizer module.
 */

/**
 * Implements hook_schema().
 */
function panelizer_schema() {
  // This should always point to our 'current' schema. This makes it
  // relatively easy to keep a record of schema as we make changes to it.
  return panelizer_schema_4();
}

/**
 * Schema version 1 for Panels in D6.
 */
function panelizer_schema_1() {
  $schema = array();

  $common_fields = array(
    'no_blocks' => array(
      'type' => 'int',
      'size' => 'tiny',
      'description' => 'Whether or not the node disable sidebar blocks.',
      'default' => 0,
    ),
    'css_id' => array(
      'type' => 'varchar',
      'length' => '255',
      'description' => 'The CSS ID this panel should use.',
      'default' => '',
    ),
    'css' => array(
      'type' => 'text',
      'size' => 'big',
      'description' => 'Any CSS the author provided for the panel.',
      'object default' => '',
    ),
    'pipeline' => array(
      'type' => 'varchar',
      'length' => '255',
      'description' => 'The render pipeline this panel uses.',
      'default' => 'standard',
    ),
    'contexts' => array(
      'type' => 'text',
      'size' => 'big',
      'description' => 'The contexts configured by the node author.',
      'serialize' => TRUE,
      'object default' => array(),
    ),
    'relationships' => array(
      'type' => 'text',
      'size' => 'big',
      'description' => 'The relationship contexts configured by the node author.',
      'serialize' => TRUE,
      'object default' => array(),
    ),
    'did' => array(
      'type' => 'int',
      'not null' => TRUE,
      'description' => 'The display ID of the panel.',
      'no export' => TRUE,
    ),
  );

  $schema['panelizer_entity'] = array(
    'export' => array(
      'bulk export' => FALSE,
      'can disable' => FALSE,
      'identifier' => 'panelizer_node',
    ),
    'description' => 'Node panelizer references.',
    'fields' => array(
      'entity_type' => array(
        'description' => 'The type of the entity this panel is attached to.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'entity_id' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The entity ID this panel is attached to.',
      ),
      'revision_id' => array(
        'description' => 'The revision id of the entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The name of the default being used if there is one.',
      ),
    ) + $common_fields,
    'primary key' => array('entity_type', 'entity_id', 'revision_id', 'view_mode'),
  );

  $schema['panelizer_defaults'] = array(
    'description' => 'Node type panelizer references.',
    'export' => array(
      'primary key' => 'pnid',
      'key' => 'name',
      'key name' => 'Name',
      'admin_title' => 'title',
      'identifier' => 'panelizer',
      'default hook' => 'panelizer_defaults',
      'api' => array(
        'owner' => 'panelizer',
        'api' => 'panelizer',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      // 'create callback' => 'panelizer_export_create_callback',
      'save callback' => 'panelizer_export_save_callback',
      'export callback' => 'panelizer_export_export_callback',
      'delete callback' => 'panelizer_export_delete_callback',
      'subrecords callback' => 'panelizer_export_delete_callback_subrecords',
    ),
    'fields' => array(
      'pnid' => array(
        'type' => 'serial',
        'description' => 'The database primary key.',
        'no export' => TRUE,
        'not null' => TRUE,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The unique name of this default.',
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => '255',
        'description' => 'The human readable title of this default.',
      ),
      'panelizer_type' => array(
        'type' => 'varchar',
        'length' => '32',
        'description' => 'The panelizer entity type, such as node or user.',
      ),
      'panelizer_key' => array(
        'type' => 'varchar',
        'length' => '128',
        'description' => 'The panelizer entity bundle.',
      ),
    ) + $common_fields,
    'primary key' => array('pnid'),
    'indexes' => array(
      'name' => array('name'),
      'type_key' => array('panelizer_type', 'panelizer_key'),
    ),
  );

  return $schema;
}

function panelizer_schema_2() {
  $schema = panelizer_schema_1();
  $schema['panelizer_defaults']['fields']['access'] = array(
    'type' => 'text',
    'size' => 'big',
    'description' => 'Contains the access control for editing this default.',
    'serialize' => TRUE,
    'object default' => array(),
  );

  $schema['panelizer_defaults']['fields']['view_mode'] = array(
    'type' => 'varchar',
    'length' => '128',
    'description' => 'Contains the view mode this panelizer is for.',
  );

  $schema['panelizer_entity']['fields']['view_mode'] = array(
    'type' => 'varchar',
    'length' => '128',
    'description' => 'Contains the view mode this panelizer is for.',
  );

  $schema['panelizer_entity']['fields']['css_class'] = array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'The CSS class this panel should use.',
    'default' => '',
  );

  $schema['panelizer_defaults']['fields']['css_class'] = array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'The CSS class this panel should use.',
    'default' => '',
  );

  $schema['panelizer_entity']['fields']['title_element'] = array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'The HTML element the title should use.',
    'default' => 'H2',
  );

  $schema['panelizer_defaults']['fields']['title_element'] = array(
    'type' => 'varchar',
    'length' => '255',
    'description' => 'The HTML element the title should use.',
    'default' => 'H2',
  );

  $schema['panelizer_entity']['fields']['link_to_entity'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Whether or not the title should link to the entity.',
    'default' => 1,
  );

  $schema['panelizer_defaults']['fields']['link_to_entity'] = array(
    'type' => 'int',
    'size' => 'tiny',
    'description' => 'Whether or not the title should link to the entity.',
    'default' => 1,
  );

  return $schema;
}

function panelizer_schema_3() {
  $schema = panelizer_schema_2();
  $schema['panelizer_defaults']['fields']['extra'] = array(
    'type' => 'text',
    'size' => 'big',
    'description' => 'Contains extra data that can be added by modules.',
    'serialize' => TRUE,
    'object default' => array(),
  );

  $schema['panelizer_entity']['fields']['extra'] = array(
    'type' => 'text',
    'size' => 'big',
    'description' => 'Contains extra data that can be added by modules.',
    'serialize' => TRUE,
    'object default' => array(),
  );

  return $schema;
}

function panelizer_schema_4() {
  $schema = panelizer_schema_3();
  $schema['panelizer_entity']['fields']['view_mode']['not null'] = TRUE;

  return $schema;
}

/**
 * Implements hook_install().
 */
function panelizer_install() {
  // Set the module weight so it can execute after Panels.
  db_update('system')
    ->fields(array(
      'weight' => 21,
    ))
    ->condition('name', 'panelizer')
    ->execute();
}

/**
 * Implements hook_uninstall().
 */
function panelizer_uninstall() {
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if (isset($entity_info['bundles'])) {
      foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
        // View mode variables.
        if (!empty($entity_info['view modes'])) {
          foreach ($entity_info['view modes'] as $view_mode => $view_info) {
            variable_del('panelizer_' . $entity_type . ':' . $bundle_name . ':' . $view_mode . '_selection');
          }
        }
        variable_del('panelizer_' . $entity_type . ':' . $bundle_name . ':default_selection');
        variable_del('panelizer_' . $entity_type . ':' . $bundle_name . ':page_manager_selection');

        // Other variables.
        variable_del('panelizer_defaults_' . $entity_type . '_' . $bundle_name);
        variable_del('panelizer_' . $entity_type . ':' . $bundle_name . '_allowed_layouts');
        variable_del('panelizer_' . $entity_type . ':' . $bundle_name . '_allowed_layouts_default');
        variable_del('panelizer_' . $entity_type . ':' . $bundle_name . '_allowed_types');
        variable_del('panelizer_' . $entity_type . ':' . $bundle_name . '_default');
      }
    }
  }
}

/**
 * Update the panelizer variable to be more feature module friendly.
 */
function panelizer_update_7100() {
  $panelizer_defaults = variable_get('panelizer_defaults', array());

  if (!empty($panelizer_defaults)) {
    foreach ($panelizer_defaults as $entity => $bundles) {
      foreach ($bundles as $bundle => $values) {
        variable_set('panelizer_defaults_' . $entity . '_' . $bundle, $values);
      }
    }
  }

  variable_del('panelizer_defaults');
  return t('Updated panelizer variables.');
}

/**
 * Update the panelizer node table to be the panelizer entity table.
 */
function panelizer_update_7101() {
  // Rename the table.
  db_rename_table('panelizer_node', 'panelizer_entity');

  // Remove the primary key.
  db_drop_primary_key('panelizer_entity');

  // Add the entity type.
  $entity_type = array(
    'description' => 'The type of the entity this panel is attached to.',
    'type' => 'varchar',
    'length' => 255,
  );

  db_add_field('panelizer_entity', 'entity_type', $entity_type);

  // Rename nid to entity_id.
  $entity_id = array(
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'description' => 'The entity ID this panel is attached to.',
  );

  db_change_field('panelizer_entity', 'nid', 'entity_id', $entity_id);

  // Update the entity_type field to 'node' since all pre-existing
  // panelizer objects are nodes.
  db_update('panelizer_entity')
    ->fields(array('entity_type' => 'node'))
    ->execute();

  // Add the new index
  db_add_primary_key('panelizer_entity', array('entity_type', 'entity_id'));
}

/**
 * Add revision support.
 */
function panelizer_update_7102() {
  // Remove the primary key.
  db_drop_primary_key('panelizer_entity');

  // Add the entity type.
  $revision_id = array(
    'description' => 'The revision id of the entity.',
    'type' => 'int',
    'unsigned' => TRUE,
  );

  db_add_field('panelizer_entity', 'revision_id', $revision_id);

  db_query("UPDATE {panelizer_entity} pe LEFT JOIN {node} n ON pe.entity_id = n.nid SET pe.revision_id = n.vid");

  // Add the new index
  db_add_primary_key('panelizer_entity', array('entity_type', 'entity_id', 'revision_id'));

  return t('Added revision support.');
}

/**
 * Set primary keys to NOT NULL.
 */
function panelizer_update_7103() {
  $schema = panelizer_schema_1();

  db_change_field('panelizer_entity', 'entity_type', 'entity_type', $schema['panelizer_entity']['fields']['entity_type']);
  db_change_field('panelizer_entity', 'revision_id', 'revision_id', $schema['panelizer_entity']['fields']['revision_id']);
  db_change_field('panelizer_defaults', 'pnid', 'pnid', $schema['panelizer_defaults']['fields']['pnid']);
}

/**
 * Add the access field.
 */
function panelizer_update_7104() {
  $schema = panelizer_schema_2();
  $access = $schema['panelizer_defaults']['fields']['access'];
  db_add_field('panelizer_defaults', 'access', $access);
}

/**
 * Add the view mode field.
 */
function panelizer_update_7105() {
  $schema = panelizer_schema_2();
  $view_mode = $schema['panelizer_defaults']['fields']['view_mode'];
  db_add_field('panelizer_defaults', 'view_mode', $view_mode);
  $view_mode = $schema['panelizer_entity']['fields']['view_mode'];
  db_add_field('panelizer_entity', 'view_mode', $view_mode);

  db_update('panelizer_defaults')
    ->fields(array(
      'view_mode' => 'page_manager',
    ))
    ->execute();

  db_update('panelizer_entity')
    ->fields(array(
      'view_mode' => 'page_manager',
    ))
    ->execute();
}

/**
 * Add the view_mode to the primary key for the {panelizer_entity} table.
 */
function panelizer_update_7106() {
  // Remove the primary key.
  db_drop_primary_key('panelizer_entity');

  // Add the new index.
  $success = db_add_primary_key('panelizer_entity', array('entity_type', 'entity_id', 'revision_id', 'view_mode'));

  if (!$success) {
    throw new DrupalUpdateException(t("There's a record in the panelizer_entity table which caused an update to fail. Please see <a href=\"https://www.drupal.org/node/2410251\">https://www.drupal.org/node/2410251</a> for details on fixing the problem."));
  }
  else {
    return t('The Panelizer database schema has bee updated.');
  }
}

/**
 * Add the css class and element title fields.
 */
function panelizer_update_7107() {
  $schema = panelizer_schema_2();
  $css_class = $schema['panelizer_defaults']['fields']['css_class'];
  db_add_field('panelizer_defaults', 'css_class', $css_class);
  $css_class = $schema['panelizer_entity']['fields']['css_class'];
  db_add_field('panelizer_entity', 'css_class', $css_class);

  $title_element = $schema['panelizer_defaults']['fields']['title_element'];
  db_add_field('panelizer_defaults', 'title_element', $title_element);
  $title_element = $schema['panelizer_entity']['fields']['title_element'];
  db_add_field('panelizer_entity', 'title_element', $title_element);
}

/**
 * Add the link_to_entity field
 */
function panelizer_update_7108() {
  $schema = panelizer_schema_2();
  $link_to_entity = $schema['panelizer_defaults']['fields']['link_to_entity'];
  db_add_field('panelizer_defaults', 'link_to_entity', $link_to_entity);
  $link_to_entity = $schema['panelizer_entity']['fields']['link_to_entity'];
  db_add_field('panelizer_entity', 'link_to_entity', $link_to_entity);
}

/**
 * Add the extra field so that modules can extend panelizer more easily.
 */
function panelizer_update_7109() {
  $schema = panelizer_schema_3();
  $extra = $schema['panelizer_defaults']['fields']['extra'];
  db_add_field('panelizer_defaults', 'extra', $extra);
  $extra = $schema['panelizer_entity']['fields']['extra'];
  db_add_field('panelizer_entity', 'extra', $extra);
}

/**
 * Changing the size of the entity_type field of panelizer_entity.
 */
function panelizer_update_7110() {
  db_drop_primary_key('panelizer_entity');
  db_change_field('panelizer_entity', 'entity_type', 'entity_type',
    array(
      'description' => 'The type of the entity this panel is attached to.',
      'type' => 'varchar',
      'length' => 128,
      'not null' => TRUE,
    ),
    array('primary key' => array('entity_type', 'entity_id', 'revision_id', 'view_mode'))
  );
}

/**
 * This update script was removed, nothing to see here.
 */
function panelizer_update_7111() {
  // Nothing.
}

/**
 * Fix Panelizer settings.
 */
function panelizer_update_7112() {
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if (!empty($entity_info) && !empty($entity_info['bundles'])) {
      foreach ($entity_info['bundles'] as $bundle => &$bundle_info) {
        $var_name = 'panelizer_defaults_' . $entity_type . '_' . $bundle;
        $settings = variable_get($var_name);
        if (!empty($settings) && !empty($settings['view modes'])) {
          foreach ($settings['view modes'] as $view_mode => &$config) {
            // If the bundle itself or this view mode are disabled, make sure
            // all settings are disabled.
            if (empty($settings['status']) || empty($config['status'])) {
              foreach ($config as $key => $val) {
                $config[$key] = 0;
              }
            }
          }
          // Update the settings.
          variable_set($var_name, $settings);
        }
      }
    }
  }
}

/**
 * Make {panelizer_entity}.view_mode NOT NULL.
 */
function panelizer_update_7113() {
  db_drop_primary_key('panelizer_entity');
  db_change_field('panelizer_entity', 'view_mode', 'view_mode',
    array(
      'description' => 'Contains the view mode this panelizer is for.',
      'type' => 'varchar',
      'length' => '128',
      'not null' => TRUE,
    ),
    array('primary key' => array('entity_type', 'entity_id', 'revision_id', 'view_mode'))
  );
}

/**
 * Clear the menu cache to fix the display actions page arguments.
 */
function panelizer_update_7114() {
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Ensure there's one display for each revision.
 */
function panelizer_update_7115() {
  // Load any 'did' values that are used in more than one revision.
  $dids = db_query("SELECT did
    FROM {panelizer_entity}
    WHERE revision_id > 0 AND did <> 0 AND did IS NOT NULL
    GROUP BY did
    HAVING count(revision_id) > 1")->fetchCol();

  // If there are no records, there's nothing to do.
  if (empty($dids)) {
    drupal_set_message(t('No Panelizer display records need fixing.'));
  }

  // Track the number of records fixed.
  $fixed = 0;

  // Track the entities that need to be reset.
  $cache_clear = array();

  // Load all of the requested displays.
  foreach (panels_load_displays($dids) as $display) {
    // Load each panelizer_entity record for this display.
    $panelizers = db_query("SELECT * FROM {panelizer_entity} WHERE did=:did", array(':did' => $display->did));
    $ctr = 0;
    foreach ($panelizers as $panelizer) {
      // Skip the first record.
      if ($ctr === 0) {
        $ctr++;
        continue;
      }
      $ctr++;

      // Reset the 'did' value, so it will then be saved as a new display.
      $display->did = NULL;

      // Save the display, thus creating a new 'did' value.
      panels_save_display($display);

      // Assign the new display to this Panelizer record.
      $panelizer->did = $display->did;

      // Update the {panelizer} record.
      db_update('panelizer_entity')
        ->fields((array) $panelizer)
        ->condition('entity_type', $panelizer->entity_type)
        ->condition('entity_id', $panelizer->entity_id)
        ->condition('revision_id', $panelizer->revision_id)
        ->condition('view_mode', $panelizer->view_mode)
        ->execute();

      // Clear this entity's cache.
      $cache_clear[$panelizer->entity_type][] = $panelizer->entity_id;

      $fixed++;
    }
  }

  // Clear the caches for any entities that are updated.
  foreach ($cache_clear as $entity_type => $entity_ids) {
    entity_get_controller($entity_type)->resetCache($entity_ids);
  }

  drupal_set_message(t('Fixed @fixed Panelizer record(s) that were using the same display.', array('@fixed' => $fixed)));
}

/**
 * Ensure there's one display for each revision.
 */
function panelizer_update_7116() {
  drupal_set_message(t('Note: the "Panelizer" tabs on content, user, term pages, etc have been renamed to "Customize display".'));
}

/**
 * Clear the menu cache to pull in the new menu paths.
 */
function panelizer_update_7117() {
  variable_set('menu_rebuild_needed', TRUE);
  drupal_set_message(t('Note: the main Panelizer configuration page has moved to the "Structure" menu instead of the "Config" menu.'));
}

/**
 * Reload the menus to fix the 'content' default local tasks.
 */
function panelizer_update_7118() {
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Update new variables to reflect the current panelizer behavior.
 */
function panelizer_update_7119() {
  foreach (node_type_get_types() as $type) {
    $options = variable_get('node_options_' . $type->type, array('status', 'promote'));
    $options[] = 'panelizer';
    variable_set('node_options_' . $type->type, $options);
  }
}
