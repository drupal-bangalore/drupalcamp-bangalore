<?php

/*
 * Implements hook_commerce_discount_rule_build().
 */
function commerce_discount_usage_commerce_discount_rule_build($rule, $discount) {
  $wrapper = entity_metadata_wrapper('commerce_discount', $discount);

  // Product level discounts must pass the line item's order.
  $map = array(
    'order_discount' => 'commerce-order',
    'product_discount' => 'commerce-line-item:order'
  );

  if (isset($map[$discount->type])) {
    // Add condition for per-person usage
    if ($wrapper->discount_usage_per_person->value()) {
      $rule->condition(
        'commerce_discount_usage_max_usage_per_person',
        array(
          'commerce_discount' => $discount->name,
          'order:select' => $map[$discount->type],
          'usage' => $wrapper->discount_usage_per_person->value(),
        )
      );
    }
    // For normal usage
    if ($wrapper->discount_usage_limit->value()) {
      $rule->condition(
        'commerce_discount_usage_max_usage',
        array(
          'commerce_discount' => $discount->name,
          'order:select' => $map[$discount->type],
          'usage' => $wrapper->discount_usage_limit->value(),
        )
      );
    }
  }
}

/*
 * Implements hook_commerce_discount_usages().
 */
function commerce_discount_usage_flush_caches() {
  module_load_install('commerce_discount_usage');
  _commerce_discount_usage_install_helper();
}

/**
 * Get usage of a discount for a user, excluding a certain order id.
 *
 * @param string $discount_name
 *   The discount name.
 * @param string $mail
 *   The user mail.
 * @param bool $exclude_order_id
 *   If TRUE, the order id will be excluded from the SQL request.
 *
 * @return int
 *   Return the number of usage by mail.
 */
function commerce_discount_usage_get_usage_by_mail($discount_name, $mail, $exclude_order_id = FALSE) {
  $query = db_select('commerce_discount_usage', 'g')
    ->fields('g')
    ->condition('g.mail', $mail)
    ->condition('g.discount', $discount_name);

  if ($exclude_order_id) {
    $query->condition('g.order_id', $exclude_order_id, '<>');
  }

  return $query->execute()->rowCount();
}

/**
 * Get usage of a discount, excluding a certain order id.
 *
 * @param string $discount_name
 *   The discount name.
 * @param bool $exclude_order_id
 *   If TRUE, the order id will be excluded from the SQL request.
 *
 * @return int
 *   Return the number of usage.
 */
function commerce_discount_usage_get_usage($discount_name, $exclude_order_id = FALSE) {
  $query = db_select('commerce_discount_usage', 'g')
    ->fields('g')
    ->condition('g.discount', $discount_name);

  if ($exclude_order_id) {
    $query->condition('g.order_id', $exclude_order_id, '<>');
  }

  return $query->execute()->rowCount();
}

/**
 * Reset usage statistics for an entire order
 *
 * @param object $order
 *   A fully qualified order object.
 *
 * @return DeleteQuery
 *   Return a new DeleteQuery object.
 */
function commerce_discount_usage_reset_order_usage($order) {
  return db_delete('commerce_discount_usage')
    ->condition('order_id', $order->order_id)
    ->execute();
}

/**
 * Record order usage
 *
 * @param object $order
 *   A fully qualified order object.
 *
 * @return void
 */
function commerce_discount_usage_record_order_usage($order) {
  // Reset usage for this order first.
  commerce_discount_usage_reset_order_usage($order);

  // Only record discount usage if the order has an email.
  $discount_names = commerce_discount_usage_order_discounts($order);

  foreach ($discount_names as $discount_name) {
    $record = array(
      'discount' => $discount_name,
      'mail' => $order->mail ? $order->mail : '',
      'order_id' => $order->order_id
    );
    drupal_write_record('commerce_discount_usage', $record);
  }
}

/**
 * Load all discounts connected to an order, including line item level discounts
 * traced through line item unit price components.
 *
 * @param object $order
 *   A fully qualified order object.
 *
 * @return array
 *
 */
function commerce_discount_usage_order_discounts($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_discounts = array();

  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $data = $line_item_wrapper->commerce_unit_price->data->value();

    foreach ($data['components'] as $key => $component) {
      if ($component['name'] == 'discount' || !empty($component['price']['data']['discount_name'])) {
        $order_discount_name = $component['price']['data']['discount_name'];
        $order_discount_wrapper = entity_metadata_wrapper('commerce_discount', $order_discount_name);
        // Make a list of discounts present via the order's line item price
        // components.
        if ($order_discount_wrapper->value()) {
          $order_discounts[] = $order_discount_wrapper->name->value();
        }
      }
    }
  }

  // Add the set of discounts directly referenced on the order.
  if (!empty($order->commerce_discounts)) {
    foreach ($order_wrapper->commerce_discounts->value() as $discount) {
      $order_discounts[] = $discount->name;
    }
  }

  $order_discounts = array_unique($order_discounts);

  return $order_discounts;
}

/*
 * Implements hook_commerce_order_update().
 */
function commerce_discount_usage_commerce_order_update($order) {
  commerce_discount_usage_record_order_usage($order);
}

/*
 * Implements hook_commerce_order_insert().
 */
function commerce_discount_usage_commerce_order_insert($order) {
  commerce_discount_usage_record_order_usage($order);
}

/*
 * Implements hook_commerce_order_delete().
 */
function commerce_discount_usage_commerce_order_delete($order) {
  commerce_discount_usage_reset_order_usage($order);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_discount_usage_form_commerce_discount_form_alter(&$form, $form_state) {
  $form['#attached']['css'][] = drupal_get_path('module', 'commerce_discount_usage') . '/css/commerce_discount_usage.css';
}

/*
 * Implements hook_views_api().
 */
function commerce_discount_usage_views_api() {
  return array(
    'version' => 2,
    'path' => drupal_get_path('module', 'commerce_discount_usage') . '/includes/views'
  );
}
