<?php
/**
 * @file
 * Code for the cod_registration feature.
 */

include_once 'cod_registration.features.inc';
include_once 'cod_registration.admin.inc';
module_load_include('admin.inc','ticket', 'includes/ticket_registration');

/*
 * COD Registration initial page
 */
function cod_registration_menu() {

  if(variable_get('cod_registration_display_page', FALSE) && variable_get('cod_events_default_event', FALSE)) {
    $items['register'] = array(
      'title'             => 'Registration',
      'access callback'   => 'cod_registration_reg_perms',
      'page callback'     => 'drupal_get_form',
      'page arguments'    => array('cod_registration_wizard', variable_get('cod_events_default_event', FALSE)),
      'type'              => MENU_CALLBACK,
    );
  }

  $items['node/%node/check-in/%user'] = array(
    'title'             => 'Registration',
    'access callback'   => 'cod_registration_reg_perms',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('cod_registration_checkin', 1,3),
    'type'              => MENU_CALLBACK,
  );

  return $items;
}

/*
 * TODO: Make this secure.
 */
function cod_registration_reg_perms($uid = NULL) {
  return TRUE;
}


/*
 * Registration forms
 */
function cod_registration_wizard($form, &$form_state, $event_id) {
  global $user;
  $node = node_load($event_id);
  // Load the ticket module for forms

  // Initialize a description of the steps for the wizard.
  // Step 1: Show ticket information page
  // Step 1a: If already registered, show registration information
  // Step 2: Show ticket registration boxes
  // Step 3: Complete order and/or send to commerce
  if (empty($form_state['step'])) {
    //pass the login step if the user is already logged in
    if (isset($user->uid) && $user->uid > 0) {
      // We already have a username, do they have registrations?
     // if ($tickets = ticket_get_user_registrations($user, 'node', $node->nid)) {
     //   drupal_set_message(t("You're already registered for @node", array('@node' => $node->title)));
     //   drupal_goto('user/'.$user->uid.'/tickets/'.$event_id);
      //}
    }
    // This array contains the function to be called at each step to get the
    // relevant form elements. It will also store state information for each
    // step.
    $form_state['step_information'] = _cod_registration_steps();
    $form_state['step'] = 1;
  }
  $step = &$form_state['step'];

  drupal_set_title(t('@event Registration: Step @step', array('@event' => $node->title, '@step' => $step)));

  // Call the function named in $form_state['step_information'] to get the
  // form elements to display for this step.

  $form = drupal_get_form($form_state['step_information'][$step]['form'], $node);
  unset($form['submit']);

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  // Show the 'previous' button if appropriate. Note that #submit is set to
  // a special submit handler, and that we use #limit_validation_errors to
  // skip all complaints about validation when using the back button. The
  // values entered will be discarded, but they will not be validated, which
  // would be annoying in a "back" button.
  if ($step > 1) {
    $form['prev'] = array(
      '#type' => 'submit',
      '#value' => t('Previous'),
      '#name' => 'prev',
      '#submit' => array('cod_registration_wizard_previous_submit'),
      '#limit_validation_errors' => array(),
    );
  }

  // Show the Next button only if there are more steps defined.
  if ($step < count($form_state['step_information'])) {
    error_log(print_r($form_state,true));
    // The Next button should be included on every step
    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      '#name' => 'next',
      '#weight' => 100,
      '#submit' => array('cod_registration_wizard_next_submit'),
    );
    $active = 'next';
  }
  else {
    // Just in case there are no more steps, we use the default submit handler
    // of the form wizard. When this button is clicked, the
    // grasmash_registration_wizard_submit handler will be called.
    $form['finish'] = array(
      '#type' => 'submit',
      '#value' => t('Complete Registration'),
      '#submit' => array('cod_registration_wizard_submit'),
      '#validate' => array('cod_registration_wizard_validate'),
    );
    $active = 'finish';
  }

  $form[$active]['#validate'] = array();
  // Include each validation function defined for the different steps.
  // First, look for functions that match the form_id_validate naming convention.
  if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
    $form[$active]['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
  }
  // Next, merge in any other validate functions defined by child form.
  if (isset($form['#validate'])) {
    $form[$active]['#validate'] = array_merge($form[$active]['#validate'], $form['#validate']);
    unset($form['#validate']);
  }

  // Let's do the same thing for #submit handlers.
  // First, look for functions that match the form_id_submit naming convention.
  if (function_exists($form_state['step_information'][$step]['form'] . '_submit')) {
    $form[$active]['#submit'][] = $form_state['step_information'][$step]['form'] . '_submit';
  }
  // Next, merge in any other submit functions defined by child form.
  if (isset($form['#submit'])) {
    // It's important to merge in the form-specific handlers first, before
    // grasmash_registration_wizard_next_submit clears $form_state['values].
    $form[$active]['#submit'] = array_merge($form['#submit'], $form[$active]['#submit']);
    unset($form['#submit']);
  }
  dpm($form);
  return $form;
}

// Show the registration options form
function cod_registration_options_form($form, &$form_state, $event) {
  $form = field_view_field('node', $event, 'field_event_tickets', 'ticket_type');
  // Remove the submit function in lieu of our own next button
  unset($form['submit'], $form['#submit']);
  return $form;
}

function cod_registration_options_submit(&$form, &$form_state) {
  // Collate the ticket types and quantities into an easy array.
  $build_forms = array();

  foreach ($form_state['input'] as $form_field => $value) {
    if (strpos($form_field, TICKET_QUANTITY_PREFIX) === 0 && !empty($value)) {
      $ttid = str_replace(TICKET_QUANTITY_PREFIX, '', $form_field);
      $build_forms[$ttid] = $value;
    }
  }
  if (!empty($build_forms)) {
    $_SESSION['ticket']['build_forms'] = $build_forms;
    $_SESSION['ticket']['return_url'] = current_path();
  }

  return $form;
}

function cod_registration_wizard_previous_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

function cod_registration_wizard_next_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

  if ($current_step < count($form_state['step_information'])) {
    $current_step++;
    if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
      $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
    }

    $form_state['rebuild'] = TRUE;  // Force rebuild with next step.
    return;
  }
}

function cod_registration_wizard_validate(&$form, &$form_state) {
  dpm('validating');
  dpm($form_state);
}
// And now comes the magic of the wizard, the function that should handle all the
// inputs from the user on each different step.
/**
 * Wizard form submit handler.
 * - Saves away $form_state['values']
 * - Process all the form values.
 *
 * This demonstration handler just do a drupal_set_message() with the information
 * collected on each different step of the wizard.
 *
 * @param $form
 * @param $form_state
 *
 * @ingroup form_example
 */
function cod_registration_wizard_submit($form, &$form_state) {
  dpm($form);
  dpm($form_state);
  drupal_set_message("Successfully Registered!");
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
//  $node = node_load($form_state['values']['og_node']);
//  if(isset($form_state['values']['registration_type']) && $form_state['values']['registration_type'] == 'sponsored') {
//    drupal_set_message(t("Successfully registered for @node. Please continue checking out to be an individual sponsor", array("@node" => $node->title)));
//    cod_registration_add_to_cart($form_state['values']['uid'], $form_state);
//  }
//  else {
//    drupal_set_message(t("Successfully registered for @node!", array("@node" => $node->title)));
//    if($form_state['values']['checkin'] == 1) {
//      $form_state['redirect'] = 'node/'.$group_node->nid.'/checkin/'.$account->uid;
//    }
//  }
}

function _cod_registration_steps() {
  return array(
      1 => array(
        'form' => 'cod_registration_options_form',
      ),
      2 => array(
        'form' => 'ticket_register_form',
      ),
    );
}