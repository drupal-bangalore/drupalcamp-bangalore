<?php
/**
 * @file
 * Code for the COD Base feature.
 */

include_once('cod_base.features.inc');

/**
 * Implements hook_permission().
 */
function cod_base_permission() {
  $perms = array();

  $perms['administer conferences'] = array(
    'title' => t('Administer Conferences'),
    'description' => t('Allows users change global conference settings.'),
  );

  return $perms;
}

/**
 * Implements hook_menu().
 */
function cod_base_menu() {
  $items = array();

  $items['admin/conference/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configure settings and business rules for your conference.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cod_base_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );

  $items['admin/conference/list'] = array(
    'title' => 'Conference',
    'description' => 'Configure conferences.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/conference'] = array(
    'title' => 'Conference',
    'description' => 'Configure conferences.',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}


/**
 * Implements hook_menu_local_tasks_alter().
 */
function cod_base_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/orders/add' on 'admin/commerce/orders'.
  if ($root_path == 'admin/conference') {
    $item = menu_get_item('admin/conference/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function cod_base_field_formatter_info() {
  return array(
    'cod_user_label_fullname' => array(
      'label' => t("User's full name"),
      'description' => t('Display the full name of referenced user.'),
      'field types' => array('entityreference'),
      'settings' => array('link' => 1),
    ),
  );
}

function cod_base_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();
  if ($display['type'] == 'cod_user_label_fullname') {
    $element['link'] = array(
      '#type' => 'checkbox',
      '#title' => t('Link to user'),
      '#default_value' => $settings['link'],
      '#description' => t("If checked, the user fullname will link to the user's profile page."),
    );
  }
  return $element;
}
/**
 * Implements hook_field_formatter_view().
 */
function cod_base_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $result = array();
  $settings = $display['settings'];

  // Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  switch ($display['type']) {
    case 'cod_user_label_fullname':
      $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
      foreach ($items as $delta => $item) {
        $ref_entity = $item['entity'];
        if (isset($ref_entity->uid)) {
          $user_wrapper = entity_metadata_wrapper('user', $ref_entity);
          $first_name = $user_wrapper->field_profile_first->value();
          $last_name = $user_wrapper->field_profile_last->value();

          if (!empty($first_name) && !empty($last_name)) {
            $result[$delta] = array('#markup' => $first_name . ' ' . $last_name);
          }
          elseif (!empty($first_name) && empty($last_name)) {
            $result[$delta] = array('#markup' => $first_name);
          }
          elseif (empty($first_name) && !empty($last_name)) {
            $result[$delta] = array('#markup' => $last_name);
          }
          else {
            $label = $handler->getLabel($item['entity']);
            $result[$delta] = array('#markup' => check_plain($label));
          }
        }
        else {
          $label = $handler->getLabel($item['entity']);
          $result[$delta] = array('#markup' => check_plain($label));
        }
        if ($settings['link']) {
          $result[$delta]['#markup'] = l($result[$delta]['#markup'], 'user/' . $ref_entity->uid);
        }
      }
      break;
  }

  return $result;
}

/**
 * Conference admin page callback.
 */
function cod_base_admin_settings() {
  $form = array();

  $form['cod_base_default'] = array(
    '#markup' => 'Conference organizing settings page',
  );

  return system_settings_form($form);
}

/**
 * Implements hook_date_format_types().
 */
function cod_base_date_format_types() {
  $format_types = array();
  // Exported date format type: date_no_time
  $format_types['date_no_time'] = 'Date (no time)';
  return $format_types;
}

/**
* Implements hook_entity_info_alter().
*/
function cod_base_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['listing'] = array(
    'label' => t('Listing'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_cod_default_permissions().
 */
function cod_base_cod_default_permissions() {
  return array(
    'user_permission' => array('cod_base'),
    'user_role' => array('cod_base'),
  );
}
