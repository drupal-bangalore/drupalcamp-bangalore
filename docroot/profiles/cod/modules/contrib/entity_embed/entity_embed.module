<?php

/**
 * @file
 * Provides a CKEditor plugin and text filter for embedding and rendering entities.
 */

// HTML processing functions.
require_once dirname(__FILE__) . '/includes/entity_embed.html.inc';

// AJAX commands.
require_once dirname(__FILE__) . '/includes/entity_embed.commands.inc';

// File usage tracking.
require_once dirname(__FILE__) . '/includes/entity_embed.file_usage.inc';

/**
 * Implements hook_permission().
 */
function entity_embed_permission() {
  return array(
    'administer embed buttons' => array(
      'title' => t('Administer entity embed buttons'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entity_embed_menu() {
  $items['entity-embed/preview/%entity_embed_filter_format'] = array(
    'title' => 'Preview embedded entity',
    'page callback' => 'entity_embed_preview',
    'page arguments' => array(2),
    'access callback' => '_entity_embed_preview_format_access',
    'access arguments' => array(2),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );

  $items['entity-embed/dialog/entity-embed/%entity_embed_filter_format/%entity_embed_embed_button'] = array(
    'title' => 'Add/Edit embedded entity',
    'page callback' => 'entity_embed_dialog',
    'page arguments' => array(3, 4),
    'access callback' => '_entity_embed_button_is_enabled',
    'access arguments' => array(3, 4),
    'delivery callback' => 'ajax_deliver',
    'file' => 'entity_embed.admin.inc',
    'theme callback' => 'ajax_base_page_theme',
    'type' => MENU_CALLBACK,
  );

  $items['entity-embed/autocomplete-entity/%entity_embed_filter_format/%entity_embed_embed_button'] = array(
    'title' => 'Autocomplete for embedded entities',
    'page callback' => 'entity_embed_autocomplete_entity',
    'page arguments' => array(2, 3),
    'access callback' => '_entity_embed_button_is_enabled',
    'access arguments' => array(2, 3),
    'type' => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function entity_embed_help($path, $arg) {
  switch ($path) {
    case 'admin/help#entity_embed':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Drupal represents content as different types of entities: nodes, files, users, taxonomy terms, etc. Entity Embed allows entities to be embedded in other entities, for example an image (file entity) may be embedded within a page (node entity). Users embed entities via WYSIWYG through one or more buttons. A button to embed content (nodes) is provided by default but additional buttons can be configured on the <a href="@entity_embed">Entity Embed administration page</a>.', array('@entity_embed' => url('admin/config/content/embed-button'))) . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<ol>';
      $output .= '<li>' . t('Configure the jQuery Update module to use jQuery 1.7 or higher by visiting the <a href="@jquery_update">jQuery Update configuration page</a>.', array('@jquery_update' => url('admin/config/development/jquery_update'))) . '</li>';
      $output .= '<li>' . t('Enable the entity-embed filter <em>Display embedded entities</em> for the desired text formats from the <a href="@filter">Text Formats configuration page</a>.', array('@filter' => url('admin/config/content/formats'))) . '</li>';
      $output .= '<li>' . t('If the <em>Limit allowed HTML tags</em> filter is enabled, add <code>&lt;drupal-entity&gt;</code> to the <em>Allowed HTML tags</em>') . '</li>';
      $output .= '<li>' . t('Optionally enable the filter-align filter <em>Align embedded entities</em> to allow positioning of embedded entities.') . '</li>';
      $output .= '<li>' . t('To enable the WYSIWYG plugin, move the entity-embed <code>E</code> button into the Active toolbar for the desired text formats from the <a href="@ckeditor">CKEditor configuration page</a>.', array('@ckeditor' => url('admin/config/content/ckeditor'))) . '</li>';
      $output .= '</ol>';
      return $output;

    case 'admin/config/content/embed-button':
      return '<p>' . t("Embed buttons define the buttons that can be added to CKEditor's toolbar. All buttons correspond to the selcted entity type, although a particular entity type can have more than one button. After you've created the desired buttons, go to <a href='@ckeditor'>CKEditor configuration</a> page to add them to CKEditor's toolbar for the desired text formats.", array('@ckeditor' => url('admin/config/content/ckeditor'))) . '</p>';
  }
}

/**
 * Loads a text format object from the database.
 *
 * @param $format_id
 *   The format ID.
 *
 * @return
 *   A fully-populated text format object, if the requested format exists and
 *   is enabled. If the format does not exist, or exists in the database but
 *   has been marked as disabled, FALSE is returned.
 *
 * @see filter_format_exists()
 */
function entity_embed_filter_format_load($format_id) {
  $formats = filter_formats();
  return isset($formats[$format_id]) ? $formats[$format_id] : FALSE;
}

/**
 * Loads an embed button object from the database.
 *
 * @param $button_id
 *   The button ID.
 *
 * @return
 *   A fully-populated embed button object, if the requested button exists and
 *   is enabled. If the button does not exist, or exists in the database but
 *   has been marked as disabled, FALSE is returned.
 */
function entity_embed_embed_button_load($button_id) {
  ctools_include('export');

  $embed_buttons = ctools_export_crud_load_all('entity_embed');
  return isset($embed_buttons[$button_id]) ? $embed_buttons[$button_id] : FALSE;
}

/**
 * Access callback: Checks access for previewing embedded entities.
 *
 * @param $format
 *   A text format object.
 *
 * @return
 *   TRUE if entities can be previewed for the specified filter format, FALSE
 *   otherwise.
 *
 * @see entity_embed_menu()
 */
function _entity_embed_preview_format_access($format) {
  return user_access('use text format ' . $format->format);
}

/**
 * Checks whether or not the embed button is enabled for given text format.
 *
 * Returns allowed if the editor toolbar contains the embed button and neutral
 * otherwise.
 *
 * @param $filter_format
 *   The filter format to which this dialog corresponds.
 * @param $embed_button
 *   The embed button to which this dialog corresponds.
 *
 * @return boolean
 *   The access result.
 */
function _entity_embed_button_is_enabled($filter_format, $embed_button) {
  module_load_include('inc', 'ckeditor', 'includes/ckeditor.lib');
  $button_label = $embed_button->name;
  $profile = ckeditor_get_profile($filter_format->format);
  $settings = $profile->settings;
  if (strpos($settings['toolbar'], "'" . $button_label . "'")) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_flush_caches().
 */
function entity_embed_flush_caches() {
  return array('cache_entity_embed');
}

/**
 * Returns an Ajax response to generate preview of an entity.
 *
 * Expects the the HTML element as GET parameter.
 *
 * @param $filter_format
 *   The filter format.
 *
 * @return
 *   The Ajax response.
 */
function entity_embed_preview($filter_format) {
  $query_parameters = drupal_get_query_parameters();
  $text = $query_parameters['value'];

  if ($text == '') {
    drupal_exit();
  }

  // @todo: remove contextual links.
  $entity_output = check_markup($text, $filter_format->format);

  $commands[] = entity_embed_command_insert($entity_output);

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Page callback: Autocomplete for entities.
 *
 * @param $entity_type
 *   The type of the entity being saved.
 * @param $entity_id
 *   The ID of the entity being saved.
 *
 * @return
 *   Any matching entities output as JSON.
 */
function entity_embed_autocomplete_entity($filter_format, $embed_button, $string) {
  $matches = array();

  $entity_type_id = $embed_button->entity_type;
  $entity_type_bundles = $embed_button->entity_type_bundles;
  $entity_type = entity_get_info($entity_type_id);

  // Prevent errors if the entity type has no label key.
  if (empty($entity_type['entity keys']['label'])) {
    return drupal_json_output($matches);
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entity_type_id)
    ->propertyCondition($entity_type['entity keys']['label'], $string, 'STARTS_WITH')
    ->range(0, 10)
    ->propertyOrderBy($entity_type['entity keys']['label'], 'DESC')
    ->execute();

  // Add optional bundle restrictions.
  if (!empty($entity_type_bundles)) {
    $query->entityCondition('bundle', array_keys($entity_type_bundles));
  }

  $results = $query->execute();

  if (!empty($results)) {
    $ids = array_keys($results[$entity_type_id]);
    $entities = entity_load($entity_type_id, $ids);

    foreach ($entities as $entity) {
      $label = entity_label($entity_type_id, $entity);

      $matches[$label] = check_plain($label);
    }
  }

  return drupal_json_output($matches);
}

/** 
 * Implements hook_library(). 
 */
function entity_embed_library() {
  $libraries['drupal.dialog'] = array(
    'title' => 'Drupal Dialog',
    'website' => 'http://www.drupal.org',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'entity_embed') . '/js/dialog/dialog.js' => array(
        'weight' => 2,
      ),
      drupal_get_path('module', 'entity_embed') . '/js/dialog/dialog.position.js' => array(
        'weight' => 2,
      ),
      drupal_get_path('module', 'entity_embed') . '/js/dialog/dialog.jquery-ui.js' => array(
        'weight' => 2,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'entity_embed') . '/js/dialog/dialog.theme.css' => array(),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'ui.dialog'),
      array('entity_embed', 'drupal.debounce'),
      array('entity_embed', 'drupal.displace'),
    ),
  );

  $libraries['drupal.dialog.ajax'] = array(
    'title' => 'Drupal AJAX Dialog',
    'website' => 'http://www.drupal.org',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'entity_embed') . '/js/dialog/dialog.ajax.js' => array(
        'weight' => 2,
      ),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'drupal.ajax'),
      array('entity_embed', 'drupal.dialog'),
    ),
  );

  $libraries['drupal.displace'] = array(
    'title' => 'Drupal Displace',
    'website' => 'http://www.drupal.org',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'entity_embed') . '/js/drupal/displace.js' => array(
        'weight' => 2,
      ),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
    ),
  );

  $libraries['drupal.debounce'] = array(
    'title' => 'Drupal Debounce',
    'website' => 'http://www.drupal.org',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'entity_embed') . '/js/drupal/debounce.js' => array(
        'weight' => 2,
      ),
    ),
  );

  $libraries['drupal.editor.dialog'] = array(
    'title' => 'Drupal Editor Dialog',
    'website' => 'http://www.drupal.org',
    'version' => VERSION,
    'js' => array(
      drupal_get_path('module', 'entity_embed') . '/js/editor/editor.dialog.js' => array(
        'weight' => 2,
      ),
    ),
    'dependencies' => array(
      array('system', 'jquery'),
      array('system', 'drupal.ajax'),
      array('entity_embed', 'drupal.dialog'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_filter_info().
 */
function entity_embed_filter_info() {
  $filters['entity_embed'] = array(
    'title' => t('Render embedded entities'),
    'description' => t('Replaces embedded entity placeholders with the rendered entity.'),
    'process callback' => '_entity_embed_render_placeholders',
    'cache' => FALSE,
    'tips callback' => '_entity_embed_render_placeholders_tips',
  );

  $filters['filter_align'] = array(
    'title' => t('Align embedded entities'),
    'description' => t('Allows embedded entities to be aligned.'),
    'process callback' => '_entity_embed_filter_align',
    'tips callback' => '_entity_embed_filter_align_tips',
  );

  return $filters;
}

/**
 * Implements callback_filter_tips().
 *
 * Provides help for the entity embed's render placeholder filter.
 */
function _entity_embed_render_placeholders_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('
        <p>You can embed entities. Additional properties can be added to the embed tag like data-caption and data-align if supported. Examples:</p>
        <ul>
          <li>Embed by ID: <code>&lt;div data-entity-type="node" data-entity-id="1" data-view-mode="teaser" /&gt;</code></li>
          <li>Embed by UUID: <code>&lt;div data-entity-type="node" data-entity-uuid="07bf3a2e-1941-4a44-9b02-2d1d7a41ec0e" data-view-mode="teaser" /&gt;</code></li>
        </ul>');
  }
  else {
    return t('You can embed entities.');
  }
}

/**
 * Implements callback_filter_process().
 *
 * Converts embedded entity placeholders into rendered entities.
 */
function _entity_embed_render_placeholders($text) {
  $result = $text;

  if (strpos($text, 'data-entity-type') !== FALSE && (strpos($text, 'data-entity-embed-display') !== FALSE || strpos($text, 'data-view-mode') !== FALSE)) {
    $dom = entity_embed_dom_load_html($text);
    $xpath = new \DOMXPath($dom);

    foreach ($xpath->query('//*[@data-entity-type and (@data-entity-uuid or @data-entity-id) and (@data-entity-embed-display or @data-view-mode)]') as $node) {
      $entity_type = $node->getAttribute('data-entity-type');
      $entity = NULL;

      try {
        // Load the entity either by UUID (preferred) or ID.
        $uuid = $node->getAttribute('data-entity-uuid');
        $id = $node->getAttribute('data-entity-id');

        if (!empty($uuid) && module_exists('uuid')) {
          $entity = entity_uuid_load($entity_type, array($uuid));
          $entity = reset($entity);
        }
        else {
          $entity = entity_load_single($entity_type, $id);
        }

        if ($entity) {
          // If a UUID was not used, but is available, add it to the HTML.
          if (!$node->getAttribute('data-entity-uuid') && !empty($entity->uuid)) {
            $node->setAttribute('data-entity-uuid', $entity->uuid);
          }
        }

        if ($entity) {
          $context = array();

          // Set the initial langcode but it can be overridden by a data
          // attribute.
          if (!empty($langcode)) {
            $context['data-langcode'] = $langcode;
          }

          // Convert the data attributes to the context array.
          foreach ($node->attributes as $attribute) {
            $key = $attribute->nodeName;
            $context[$key] = $attribute->nodeValue;

            // Check for JSON-encoded attributes.
            $data = json_decode($context[$key], TRUE, 10);
            if ($data !== NULL && json_last_error() === JSON_ERROR_NONE) {
              $context[$key] = $data;
            }
          }

          // Support the deprecated view-mode data attribute.
          if (isset($context['data-view-mode']) && !isset($context['data-entity-embed-display']) && !isset($context['data-entity-embed-settings'])) {
            $context['data-entity-embed-settings']['view_mode'] = $context['data-view-mode'];
            unset($context['data-view-mode']);
          }

          $placeholder = entity_embed_build_placeholder($entity_type, $entity, $context);
          if (!empty($placeholder)) {
            entity_embed_set_dom_node_content($node, $placeholder);
          }
        }
      }
      catch(\Exception $e) {
        watchdog_exception('entity_embed', $e);
      }
    }

    $result = entity_embed_serialize($dom);
  }

  return $result;
}

/**
 * Implements callback_filter_tips().
 *
 * Provides help for the entity embed's align filter.
 */
function _entity_embed_filter_align_tips($filter, $format, $long = FALSE) {
  if ($long) {
    return t('
        <p>You can align images, videos, blockquotes and so on to the left, right or center. Examples:</p>
        <ul>
          <li>Align an image to the left: <code>&lt;img src="" data-align="left" /&gt;</code></li>
          <li>Align an image to the center: <code>&lt;img src="" data-align="center" /&gt;</code></li>
          <li>Align an image to the right: <code>&lt;img src="" data-align="right" /&gt;</code></li>
          <li>… and you can apply this to other elements as well: <code>&lt;video src="" data-align="center" /&gt;</code></li>
        </ul>');
  }
  else {
    return t('You can align images (<code>data-align="center"</code>), but also videos, blockquotes, and so on.');
  }
}

/**
 * Implements callback_filter_process().
 *
 * Aligns embedded entities.
 */
function _entity_embed_filter_align($text) {
  $result = $text;

  if (stristr($text, 'data-align') !== FALSE) {
    $dom = entity_embed_dom_load_html($text);
    $xpath = new \DOMXPath($dom);
    foreach ($xpath->query('//*[@data-align]') as $node) {
      // Read the data-align attribute's value, then delete it.
      $align = $node->getAttribute('data-align');
      $node->removeAttribute('data-align');

      // If one of the allowed alignments, add the corresponding class.
      if (in_array($align, array('left', 'center', 'right'))) {
        $classes = $node->getAttribute('class');
        $classes = (strlen($classes) > 0) ? explode(' ', $classes) : array();
        $classes[] = 'align-' . $align;
        $node->setAttribute('class', implode(' ', $classes));
      }
    }

    $result = entity_embed_serialize($dom);
  }

  return $result;
}

/**
 * Build a render array placeholder that will eventually render an entity.
 *
 * @param string $entity_type
 *   The type of entity to be rendered.
 * @param Entity $entity
 *   The entity to be rendered.
 * @param array $context
 *   (optional) An array of contextual information to be included in the
 *   generated placeholder.
 *
 * @return string
 *   The HTML of the entity rendered with the given context.
 */
function entity_embed_build_placeholder($entity_type, $entity, $context = array()) {
  $callback = 'entity_embed_render_embed';
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);

  $context['data-entity-type'] = $entity_type;
  $context['data-entity-id'] = $id;

  $context += array(
    'data-entity-embed-display' => 'default',
    'data-entity-embed-settings' => array(),
    'data-langcode' => NULL,
  );

  // Allow modules to alter the context.
  drupal_alter('entity_embed_context', $context, $callback, $entity);

  $placeholder = $callback($entity, $context);

  return $placeholder;
}

/**
 * Default callback to render an embedded entity.
 *
 * @param Entity $entity
 *   The entity to be rendered.
 * @param array $context
 *   An array of contextual information to be included in the generated
 *   placeholder.
 *
 * @return string
 *   The HTML of the entity rendered with the given context.
 */
function entity_embed_render_embed($entity, $context) {
  // Protect ourselves from recursive rendering.
  static $depth = 0;
  $depth++;

  if ($depth > 20) {
    throw new Exception(t('Recursive rendering detected when rendering entity @entity_type(@entity_id). Aborting rendering.', array('@entity_type' => $context['data-entity-type'], '@entity_id' => $context['data-entity-id'])));
  }

  // Allow modules to alter the entity prior to display rendering.
  module_invoke_all('entity_preembed', $entity, $context);

  // Verify that the user has permission to view the entity.
  if (!entity_access('view', $context['data-entity-type'], $entity)) {
    return '';
  }

  $entity = clone $entity;
  unset($entity->content);

  // Build and render the entity, allowing modules to alter the result before
  // rendering.
  $renderable_array = entity_view($context['data-entity-type'], array($entity), $context['data-entity-embed-settings']['view_mode'], $context['data-langcode']);

  // The output of entity_view() is keyed by the entity type and ID.
  $build = $renderable_array[$context['data-entity-type']][$context['data-entity-id']];

  drupal_alter('entity_embed', $build, $entity, $context);
  $entity_output = drupal_render($build);

  $depth--;
  return $entity_output;
}

/**
 * Implements hook_page_build().
 */
function entity_embed_page_build(&$page) {
  $page['page_bottom']['entity_embed']['#attached']['css'] = array(
    drupal_get_path('module', 'entity_embed') . '/css/entity_embed.css' => array(
      'every_page' => TRUE,
    ),
  );
}

/**
 * Implements hook_element_info_alter().
 */
function entity_embed_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'entity_embed_pre_render_text_format';
}

/**
 * Process text format elements to load and attach assets.
 */
function entity_embed_pre_render_text_format($element) {
  if (!isset($element['format'])) {
    return $element;
  }

  $field = &$element['value'];

  if (!isset($field['#value'])) {
    return $element;
  }

  ctools_include('export');

  $embed_buttons = ctools_export_crud_load_all('entity_embed');

  $buttons = array();

  foreach ($embed_buttons as $embed_button) {
    $buttons[$embed_button->name] = array(
      'id' => check_plain($embed_button->name),
      'name' => check_plain($embed_button->name),
      'label' => check_plain($embed_button->button_label),
      'entity_type' => check_plain($embed_button->entity_type),
      'image' => check_plain(_entity_embed_button_image($embed_button->button_icon_fid)),
    );
  }

  $element['#attached']['library'][] = array('entity_embed', 'drupal.dialog.ajax');

  $element['#attached']['js'][] = array(
    'data' => array(
      'entity_embed' => array(
        'DrupalEntity_dialogTitleAdd' => t('Insert entity'),
        'DrupalEntity_dialogTitleEdit' => t('Edit entity'),
        'DrupalEntity_buttons' => $buttons,
      ),
    ),
    'type' => 'setting',
  );

  return $element;
}

/**
 * Helper function to create a URL to an embed button icon.
 *
 * @param int $fid
 *   A file ID.
 *
 * @return string
 *   A string containing a URL that may be used to access the file.
 */
function _entity_embed_button_image($fid) {
  if ($fid) {
    $image = file_load($fid);
    return file_create_url($image->uri);
  }
  else {
    return file_create_url(drupal_get_path('module', 'entity_embed') . '/js/plugins/drupalentity/entity.png');
  }
}

/**
 * Implements hook_ctools_plugin_api().
 */
function entity_embed_ctools_plugin_api($module, $api) {
  if ($module == 'entity_embed' && $api == 'default_entity_embed_configurations') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function entity_embed_ctools_plugin_directory($module, $plugin) {
  if ($plugin =='export_ui') {
    return 'plugins/export_ui';
  }
}
